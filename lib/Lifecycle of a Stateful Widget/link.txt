

// https://medium.com/@hadiyaaamir222/lifecycle-of-a-stateful-widget-aece2d56c946

// https://medium.com/@iam_vishnureji/deep-dive-flutters-stateful-widget-lifecycle-337ab6bb1978

// https://www.bookstack.cn/read/flutterbyexample/aebe8dda4df3319f.md#4.%20didChangeDependencies

// https://mobikul.com/lifecycle-of-a-flutter-app/

/* 
// createState():
    Upon creation of the stateful widget, its constructor is called, which initializes the widget.
    The createState() method is then invoked, which creates the state object for the widget. 
 */
/*
  // initState:
      This method is called after the widget is inserted into the widget tree, when the object is created for the first time.
  */
/*  
  // didChangeDependencies:
    This method is called when a dependency of this widget changes.
      It is useful when the widget depends on some external data or inherits data from its parent widget.
      It is also called immediately after initState().
 */

/*
  // build:
      Builds the widgetâ€™s user interface based on its current state.
      This method is called initially when the widget is first inserted into the widget tree,
      and may be called repeatedly during the lifecycle whenever the widget needs to be rebuilt.
*/
/*
  // setState:
      Triggers a rebuild of the widget when the state changes and the associated methods are called again.
 */
/*
  // didUpdateWidget:
      Triggered when the widget is rebuilt with updated properties.
       It is called after build() and allows you to compare the previous and current widget properties.

 */
/*
  // deactivate:
      Called when the widget is removed from the tree but might be inserted again.

 */
/*
  // dispose:
      Called when the widget is removed from the widget tree permanently, allowing you to release resources held by the widget.
*/
/*
  // reassemble:
      Called when the application is reassembled during hot reload.
 */
